<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2020/03/18/%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/</url>
    <content><![CDATA[<hr>
<p>title: Alg<br>date: 2019-08-04  </p>
<h2 id="tags-刷题"><a href="#tags-刷题" class="headerlink" title="tags: 刷题"></a>tags: 刷题</h2><h1 id="关于全排列问题"><a href="#关于全排列问题" class="headerlink" title="关于全排列问题"></a>关于全排列问题</h1><h2 id="解法：1递归"><a href="#解法：1递归" class="headerlink" title="解法：1递归"></a>解法：1递归</h2><p>通常采用带回溯的dfs算法，遍历多叉树<br>找到基线条件，进行交换或者插入方法<br>*</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2020/03/18/Pytorch-%E7%AC%AC2%E7%AF%87/</url>
    <content><![CDATA[<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><p>Variable<br>dtype: torch.float32<br>       torch.int64<br>tensor numpy 共享内存<br>依照数值：</p>
<p>生成全零张量<br>torch.zeros_like()<br>torch.zeros()<br>torch.full()<br>torch.full_like()<br>创建等差的一维张量[start,end,steps)<br>torch.arrange()<br>创建均分的一维张量[start,end,steps)<br>tensor.linspace()<br>步长：end-start /(steps-1)<br>tensor.logspace()<br>tensor.eye()</p>
<p>依据概率比分布：<br>生成正态分布<br>torch.normal() mean std<br>生成标准正态分布,均匀分布<br>torch.randn()<br>torch.rand_like()<br>生成随机排列<br>torch.randperm()<br>伯努利（0，1）<br>torch.bernoulli()</p>
<hr>
<h1 id="tensor-的拼接与切分"><a href="#tensor-的拼接与切分" class="headerlink" title="tensor 的拼接与切分"></a>tensor 的拼接与切分</h1><p>1.1 torch.cat() 将张量按照维度dim进行拼接<br>tensor:<br>dim:<br>1.2 torch.stack() 在新创建的维度dim上进行拼接<br>tensor:<br>dim:<br>1.3 torch.chunk()将张量按照维度dim进行平均切分<br>input：<br>chunks：要切分的份数<br>dim:<br>1.4 torch.split()<br>tensor:<br>split_size_or_sections:<br>dim:<br>2.1 torch.index_select()<br>input:<br>dim:<br>index:<br>2.2<br>torch.masked_select() 按照mask中的true索引<br>3.1 torch.shape() 变换张量形状<br>3.2 torch.transpose()<br>3.3 torch.t()<br>3.4 torch.squeeze()<br>3.5 torch.unsqueeze() </p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Pytorch 第一篇</title>
    <url>/2020/01/19/Pytorch-%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
    <content><![CDATA[<h1 id="Pytorch-第一篇"><a href="#Pytorch-第一篇" class="headerlink" title="Pytorch 第一篇"></a>Pytorch 第一篇</h1><hr>
<p>Anaconda是神器，但作为初学者的我，还是处处踩坑。对于Python也是刚捡起来，以前并没多了解。<br>安装好Anaconda,CUDA,torch,torchversion，测试如下指令：<br>conda create -n pytorch_gpu python=3.7<br>报错：<img src="/2020/01/19/Pytorch-第一篇/error.png" alt="创建虚拟空间报错"><br>这应该是conda的问题，conda的python版本也没activate。尝试删掉pkgs文件夹重新执行指令，还是同样的报错。测试了一个下午，还是没找到解决办法。<br>最后卸载anaconda，进入whl的安装文件夹，采用 pip install —（torch官网选择合适版本的whl）<br>这里再cmd下执行了，但在pycharm的terminal中还需执行，否则不能install，会报错：  No module named ‘tools.nnwrap’，是版本不匹配的问题。我这里下载了python3.5版本的torch，本机python3.5. 在cmd测试可以正常import torch。猜测是pycharm解释器的选择问题？<br>还需要仔细了解Python的interpreter—–python.exe.<br><figure class="highlight plain"><figcaption><span>torch  </span></figcaption><table><tr><td class="code"><pre><span class="line">print(&quot;hello pytorch&#123;&#125;&quot;.format(torch.__version__))</span><br></pre></td></tr></table></figure></p>
<h2 id><a href="#" class="headerlink" title></a><img src="/2020/01/19/Pytorch-第一篇/success.png" alt="cuda"></h2><p>这学期学过了Compiler principle，x86的Compilation,只是学校里简单的介绍。我对于高级语言转换成机器语言的完整过程还是很空白，没有一个完整的体系概念。我感觉自己现在杂乱无章，C++的动态链接库.dll，Jvm的运行机制，Python.exe解释器，很多实际遇到的问题都没法解决，或者停下来看，我觉得还是很可惜的。</p>
]]></content>
  </entry>
  <entry>
    <title>NLP_beginner</title>
    <url>/2020/01/14/NLP-beginner/</url>
    <content><![CDATA[<h1 id="NLP入门-day-0"><a href="#NLP入门-day-0" class="headerlink" title="NLP入门 day_0"></a>NLP入门 day_0</h1><p><img src="/2020/01/14/NLP-beginner/NLP_0.png" alt="NLP_0"></p>
<h2 id="最近对NLP比较感兴趣，开始记录我的NLP学习之路"><a href="#最近对NLP比较感兴趣，开始记录我的NLP学习之路" class="headerlink" title="最近对NLP比较感兴趣，开始记录我的NLP学习之路"></a>最近对NLP比较感兴趣，开始记录我的NLP学习之路</h2>]]></content>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB------第一篇</title>
    <url>/2019/09/24/MongoDB%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
    <content><![CDATA[<h1 id="MongoDB——第一篇"><a href="#MongoDB——第一篇" class="headerlink" title="MongoDB——第一篇"></a>MongoDB——第一篇</h1><h2 id="1-什么是momgodb："><a href="#1-什么是momgodb：" class="headerlink" title="1.什么是momgodb："></a>1.什么是momgodb：</h2><p>MongoDB 将数据存储为一个文档，数据结构由(key=&gt;value)对组成。MongoDB文档类似于Json对象(BSON):<br>1.支持多种查询语言，还可以对数据库建立索引<br>2.面向集合存储，容易存储对象类型的数据  </p>
<p>面向集合:Collection-Oriented 数据被分组存在数据集中，被称为一个集合每个集合在数据库中都有一个唯一的标识名，并且可以包含无限数目的文档。集合的概念类似关系型数据库（RDBMS）里的表（table），不同的是它不需要定义任何模式（schema) 。   </p>
<p>存储在集合中的文档，被存储为键-值对的形式。键用于唯一标识一个文档，为字符串类型，而值则可以是各种复杂的文件类型。我们称这种存储形式为BSON（Binary Serialized Document Format）。<br>3</p>
]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB------第二篇</title>
    <url>/2019/09/24/MongoDB%E7%AC%AC%E4%BA%8C%E7%AF%87/</url>
    <content><![CDATA[<h1 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h1><p>@Document:标示映射到Mongodb文档上的领域对象  </p>
<p>@Id:标示某个领域为ID域  </p>
<p>@Indexed:标示某个字段为Mongodb的索引字段  </p>
<h2 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h2>]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM_day0</title>
    <url>/2019/09/12/JVM_0/</url>
    <content><![CDATA[<h1 id="JAVA-内存区域和内存溢出异常"><a href="#JAVA-内存区域和内存溢出异常" class="headerlink" title="JAVA 内存区域和内存溢出异常"></a>JAVA 内存区域和内存溢出异常</h1><h2 id="2-1-程序计数器"><a href="#2-1-程序计数器" class="headerlink" title="2.1 程序计数器"></a>2.1 程序计数器</h2><p>1.每条线程都需要一个程序计数器：java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式实现的，在任何一个确定的时刻，一个处理器只会执行一条线程中的指令，为了线程切换后可以恢复到正确的执行位置，每个线程拥有一个独立的counter，这类内存区域称为线程私有内存。</p>
<h2 id="2-2-JVM-stacks虚拟机栈"><a href="#2-2-JVM-stacks虚拟机栈" class="headerlink" title="2.2 JVM stacks虚拟机栈"></a>2.2 JVM stacks虚拟机栈</h2><p>1.JVM stack描述的是Java方法执行的内存模型，每个方法执行，同时创建一个栈帧，用于存储局部变量表等信息，每一个方法从调用到执行完成的过程，就对应了一个栈帧的push，pop操作。</p>
<p>2.一般把java内存分为Heap,Stack,Stack中的局部变量表存放了编译期各种基本数据类型（boolean,byte,char,short,int,float,long,double），其中，64位的double和long占用2个局部空间(slot)，其余各占1个，局部变量表所需的内存空间在编译期间完成分配。<br>3.两种异常：<br>stackover error：线程请求的栈深度大于虚拟机所允许的深度。<br>outofMemory error：动态拓展时候无法申请到足够的内存  </p>
<h2 id="2-3-Native-method-stacks-本地方法栈"><a href="#2-3-Native-method-stacks-本地方法栈" class="headerlink" title="2.3 Native method stacks 本地方法栈"></a>2.3 Native method stacks 本地方法栈</h2><p>1.本地方法栈和jvmstacks作用相似，jvm为java方法（字节码）服务，本地方法栈为虚拟机使用的Native方法服务，也有以上两种异常</p>
]]></content>
  </entry>
  <entry>
    <title>接口和抽象类</title>
    <url>/2019/09/01/%E5%85%B3%E4%BA%8E%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="关于接口和抽象类"><a href="#关于接口和抽象类" class="headerlink" title="关于接口和抽象类"></a>关于接口和抽象类</h1><p><strong>接口(interface)和抽象类（abstract class）是和支持抽象类定义的两种机制。</strong></p>
<p><strong>接口：</strong>公开的，不能有私有方法或者变量，接口中的所有方法都没有方法体，通过关键字interface实现。</p>
<p><strong>抽象类：</strong>可以有私有方法或者变量，通过把类或者类中的方法声明为abstract来表示一个类是一个抽象类，被声明的抽象类不能有方法体</p>
<p><strong>抽象类和普通类的区别：</strong>抽象类不能被实例化</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis_day0</title>
    <url>/2019/08/04/Mybatis_0/</url>
    <content><![CDATA[<h1 id="MyBatis查询结果"><a href="#MyBatis查询结果" class="headerlink" title="MyBatis查询结果"></a>MyBatis查询结果</h1><h2 id="resultTtpe返回值类型："><a href="#resultTtpe返回值类型：" class="headerlink" title="resultTtpe返回值类型："></a><strong>resultTtpe返回值类型</strong>：</h2><p><strong>1.返回一般数据类型</strong><br>比如根据id获得数据库某个字段的值<br>mapper接口：<br><code>String getElemNameById(Integer id);</code><br>SQL映射文件：<br><code>&lt;select id=&quot;getElemNameById&quot; resultType=&quot;string&quot;&gt;</code><br>     <code>select username from t_employee where id =#{id}</code><br> <code>&lt;/select&gt;</code></p>
<p><strong>2.返回JavaBean类型的数据</strong><br>比如根据某个字段获得数据库中的信息，把查询结果信息封装成某个JavaBean类型的数据<br>mapper接口：<br><code>Employee getElemNameById(Integer id);</code><br>SQL映射文件：<br><code>&lt;select id=&quot;getElemNameById&quot; resultType=&quot;employee&quot;&gt;</code><br>     <code>select*from t_employee where id =#{id}</code><br> <code>&lt;/select&gt;</code><br><strong>3.返回List类型  </strong><br>若查询的数据不止一条，比如模糊查询，全表查询等。这时候返回的数据可能是不止一条数据，多数据处理，放在List集合中<br>mapper接口：<br><code>List&lt;Employee&gt;getAllEmps();</code><br>SQL映射文件：<br><code>&lt;select id=&quot;getAllEmps&quot; resultType=&quot;employee&quot;&gt;</code><br>    <code>select*from t_employee</code><br><code>&lt;/select&gt;</code>  </p>
<p><strong>4.返回Map类型</strong><br>将查询到的数据封装成Map<br>1.查询的结果是一条，可以把查询的数据以{表字段名，对应的值}方式存入到Map中<br>mapper接口：<br>Map&lt;String,Object&gt;getEmAsMapById(Integer id);<br>2.若查询到的结果是多条数据，也可以把查询的数据以{表中某一字段名，JavaBean}方式封装成Map<br>mapper接口：<br>@MapKey(“id”)<br>Map&lt;Integer,Employee&gt; getAllEmpAsMap();</p>
]]></content>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot_day0</title>
    <url>/2019/07/28/spring%20boot_0/</url>
    <content><![CDATA[<p>#<strong>学习Spring Boot</strong></p>
<p>##第一篇</p>
<p>##<strong>配置maven</strong></p>
<p>##<strong>Spring Boot工程结构</strong><br>以下结构是比较推荐的package组织方式  </p>
<p><img src="/2019/07/28/spring boot_0/day0_1.png" alt="package"></p>
<p>com.example.myproject.domin:用于实体映射关系和数据访问相关的接口和实现  </p>
<p>com.example.myproject.service:用于编写业务逻辑相关的接口和实现  </p>
<p>com.example.myproject.web：用于编写Web层相关的接口和实现，比如SPringlMVC的controller等</p>
<p>##<strong>注解</strong></p>
<p>###核心注解<br><strong>@RestController:</strong>是@ResponseBody和@Controller的缩写  </p>
<p><strong>@RequestMapping:</strong><br>   @RequestMapping是一个用来处理请求地址映射的注解，可用于类或者方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。   </p>
<p><strong>@GetMapping:</strong>   </p>
<p><strong>@RequestMapping注解有六个属性</strong>，下面进行详细的说明。<br>1.value, method<br>value:指定请求的实际地址，指定的地址可以是URI Template模式。<br>method:指定请求的method类型，GET、POST、PUT、DELETE等。</p>
<p>2.consumes, produces<br>consumes:指定处理请求的提交内容类型（Content-Type），例如application/json,text/html。<br>produces:指定返回的内容类型，仅当request请求头中的（Accept）类型中包含该指定类型才返回。</p>
<p>3.params, headers<br>params:指定request中必须包含某些参数值才让该方法处理。<br>headers:指定request中必须包含某些指定的header值，才能让该方法处理请求。  </p>
<p><strong>@RequestMapping  @GetMapping @PostMapping 区别</strong></p>
<p>@GetMapping是一个组合注解，是@RequestMapping(method = RequestMethod.GET)的缩写。</p>
<p>@PostMapping是一个组合注解，是@RequestMapping(method = RequestMethod.POST)的缩写。</p>
<p><strong>@RequestParam</strong><br>通过这个注解从页面中传递参数  </p>
<p><strong>@ResponseBody</strong><br>返回值处理器，专门用于处理Handler方法的返回值，执行完Controller的一个具体方法，返回一个普通对象，若标注ResponseBody，则返回一个json字符串</p>
<p><strong>@Controller和@RequestController</strong><br>**SpringApplicationConfigrauation(Application.classs)在1.4x后被替换为@SpringBoot()</p>
<p>###其他注解<br>@Autowired：自动导入依赖的bean </p>
<p>@PathVariable:获取参数</p>
<p><code>参考链接：https://www.jianshu.com/p/039f448defbd</code></p>
<p>##<strong>RESTful API</strong><br><strong>Rest关键字：</strong><br>REST是REpresentational State Transfer的缩写（一般中文翻译为表述性状态转移),简单的说，REST就是把资源的状态以适合客户端或服务端的形式从服务端转移到客户端(或反过来)。在REST中，资源通过URL进行识别和定位，然后通过行为(Http方法)来定义REST完成怎样的功能。</p>
<p><img src="/2019/07/28/spring boot_0/day0_2.png" alt="example"></p>
<p>在SpringBoot中：  </p>
<p><img src="/2019/07/28/spring boot_0/day0_3.png" alt="REST"></p>
<p>##thymeleaf：<br>thymeleaf是纯HTML，和jsp一样，但不需要服务器，是spring boot前端显示的一个模板</p>
<p>##Swagger2：<br>Api接口生成文档工具</p>
]]></content>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot_day1</title>
    <url>/2019/07/28/spring%20boot_1/</url>
    <content><![CDATA[<h1 id="学习Spring-Boot"><a href="#学习Spring-Boot" class="headerlink" title="学习Spring Boot"></a><strong>学习Spring Boot</strong></h1><h2 id="第二篇"><a href="#第二篇" class="headerlink" title="第二篇"></a>第二篇</h2><p><strong>spring boot 集成redis</strong><br>stringRedisTemplate.opsForValue().get(“test”)//根据key获取缓存中的val<br><strong>spring boot 集成mongoDB</strong><br><strong>整合MyBatis</strong></p>
<p><strong>map&lt;String,Object&gt;</strong><br><strong>POJO,BO,VO,DTO,DAO,PO</strong><br>PO：持久对象，一个PO就是数据库中的一条记录<br>BO：业务对象，把业务逻辑封装为一个对象，这个对象可以包括一个或多个其他对象<br>VO:视图的对象，对于一个web页面，将整个页面属性封装为一个对象，然后用一个VO对象在视图层和控制层进行运输交换<br>POJO：<br>DAO:数据访问对象  </p>
]]></content>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域问题</title>
    <url>/2019/07/28/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><p>跨域资源共享（CORS）</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>Get&amp;Post</title>
    <url>/2019/07/21/Get&amp;Post/</url>
    <content><![CDATA[<p>##关于Get和Post</p>
<p>参考链接：<a href="https://blog.csdn.net/yipiankongbai/article/" target="_blank" rel="noopener">https://blog.csdn.net/yipiankongbai/article/</a><br>**表现形式：<br>Http请求格式 </p>
<p><code>&lt;method&gt;&lt;request-URL&gt;&lt;version&gt;</code><br><code>&lt;headers&gt;</code>  </p>
<p><code>&lt;entity-body&gt;</code>    </p>
<h2 id="在HTTP请求中，奇异行必须是一个请求行，包括请求方法，请求URL，报文所用HTTP版本信息。紧接着是一个herders小节，可以有零个或一个首部，用来说明服务器要使用的附加信息。在首部之后就是一个空行，最后就是报文实体的主体部分，包含一个由任意数据组成的数据块。但是并不是所有的报文都包含实体的主体部分。"><a href="#在HTTP请求中，奇异行必须是一个请求行，包括请求方法，请求URL，报文所用HTTP版本信息。紧接着是一个herders小节，可以有零个或一个首部，用来说明服务器要使用的附加信息。在首部之后就是一个空行，最后就是报文实体的主体部分，包含一个由任意数据组成的数据块。但是并不是所有的报文都包含实体的主体部分。" class="headerlink" title="在HTTP请求中，奇异行必须是一个请求行，包括请求方法，请求URL，报文所用HTTP版本信息。紧接着是一个herders小节，可以有零个或一个首部，用来说明服务器要使用的附加信息。在首部之后就是一个空行，最后就是报文实体的主体部分，包含一个由任意数据组成的数据块。但是并不是所有的报文都包含实体的主体部分。"></a>在HTTP请求中，奇异行必须是一个请求行，包括请求方法，请求URL，报文所用HTTP版本信息。紧接着是一个herders小节，可以有零个或一个首部，用来说明服务器要使用的附加信息。在首部之后就是一个空行，最后就是报文实体的主体部分，包含一个由任意数据组成的数据块。但是并不是所有的报文都包含实体的主体部分。</h2><p>Get请求实例：<br><code>Request URL: https://cdn.bootcss.com/font-awesome/4.7.0/fonts/fontawesome-webfont.woff2?v=4.7.0</code><br>Post请求实例:<br><code>Request URL: http://localhost:8080/admin/page/modify</code></p>
<p>1.GET请求，请求的数据会附加在URL之后，以?分割URL和传输数据，多个参数用&amp;连接。URL的编码格式采用的是ASCII编码，而不是uniclde，即是说所有的非ASCII字符都要编码之后再传输。</p>
<p>2.POST请求：POST请求会把请求的数据放置在HTTP请求包的包体中。<br>因此，GET请求的数据会暴露在地址栏中，而POST请求则不会。</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>无法更新博客</title>
    <url>/2019/02/24/%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>#关于HEXO上传图片问题<br>1.问题：写第一篇博客时候，上传图片失败，页面没有显示，更改_config,yml文件以后可以生成一个新建的md所对应的文件夹，将图片放入该文件夹，执行hexo d -g，重新加载页面可以显示。但是后续上传的一些图片又无法显示了，github上对图片提示：”Binary File not shown”，其他已经上传的图片显示： File renamed without changes。解决：待补充</p>
<hr>
<p>解决：Hexo框架上传图片，再source文件-——post文件中生成的新文件夹，里面放该篇博客所用的图片，数量不能太多，另外，要使用 hexo -clean 清除浏览器缓存，再用hexo -g ，hexo -d命令部署再GitHub上。</p>
]]></content>
  </entry>
  <entry>
    <title>寒假学习记录</title>
    <url>/2019/02/20/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h1><p><em>这是我的第一篇博客，主要练习一下markdown语法并记录一下寒假学习知识</em></p>
<h1 id="phpstudy-mysql-xss实现留言板攻击"><a href="#phpstudy-mysql-xss实现留言板攻击" class="headerlink" title="phpstudy+mysql+xss实现留言板攻击"></a>phpstudy+mysql+xss实现留言板攻击</h1><ol>
<li>准备部分<br>初次接触php,下载安装phpstudy，phpstorm，打开自带的mysql数据库。</li>
<li>留言板实现过程<br>留言板设计思路主要分为三个部分，前端页面(index.php)，连接数据库(incDB.php)，<br>前端留言存入数据库(insertToDB.php)。这是留言板最基本的三项内容，没有加入登陆<br>界面，评论，好评差评功能。下面附上代码实现：</li>
</ol>
<hr>
<p><em>index.php</em><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form method=&quot;POST&quot; action=&quot;InsetToDB.php&quot;&gt;</span><br><span class="line">    昵称:&lt;input type=&quot;text&quot; size=&quot;8&quot;; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        内容:&lt;textarea rows=&quot;5&quot; name=&quot;text&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot; name=&quot;B1&quot;&gt;&lt;input type=&quot;reset&quot; value=&quot;重置&quot; name=&quot;B2&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: wwx</span><br><span class="line"> * Date: 2019/2/14</span><br><span class="line"> * Time: 23:16</span><br><span class="line"> */</span><br><span class="line">//utf-8 编码格式</span><br><span class="line">header(&quot;Content-Type: text/html;charset=utf-8&quot;);</span><br><span class="line">//插入文件（错误发生后脚本会继续执行）</span><br><span class="line">include(&quot;IncDB.php&quot;);</span><br><span class="line">//查询数据</span><br><span class="line">$query = &quot;SELECT * FROM intd&quot;;</span><br><span class="line">//执行查询语句        mysql链接  查询字符串</span><br><span class="line">$result   = mysqli_query($link, $query);</span><br><span class="line">if($result)&#123;</span><br><span class="line">//  条件为真</span><br><span class="line">    while($row  = mysqli_fetch_row($result))</span><br><span class="line">    &#123;</span><br><span class="line">//      遍历数据</span><br><span class="line">        echo &quot;ID: &quot;.$row[0].&quot; 姓名: &quot;.$row[1].&quot; 时间: &quot;.$row[3].&quot;&lt;br&gt;&quot;;</span><br><span class="line">        echo $row[2];</span><br><span class="line">        echo &quot;&lt;hr&gt;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">//关闭数据库</span><br><span class="line">mysqli_close($link);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<hr>
<p><em>incDB.php</em><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: wwx</span><br><span class="line"> * Date: 2019/2/14</span><br><span class="line"> * Time: 23:20</span><br><span class="line"> */</span><br><span class="line">// utf-8 编码格式</span><br><span class="line">header(&quot;Content-Type: text/html;charset=utf-8&quot;);</span><br><span class="line">//       链接数据库          主机        用户名  密码  表名  默认端口</span><br><span class="line">$link=mysqli_connect( &apos;localhost&apos;, &apos;root&apos;, &apos;root&apos;, &apos;intd&apos;, &apos;3306&apos; );</span><br><span class="line">//如果链接不到</span><br><span class="line">if(!$link)</span><br><span class="line">&#123;</span><br><span class="line">    die(&quot;&lt;center&gt;出错啦:1!&lt;/center&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<hr>
<p><em>insertToDB.php</em><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Created by PhpStorm.</span><br><span class="line"> * User: wwx</span><br><span class="line"> * Date: 2019/2/14</span><br><span class="line"> * Time: 23:21</span><br><span class="line"> */</span><br><span class="line">//编码格式</span><br><span class="line">header(&quot;Content-Type: text/html;charset=utf-8&quot;);</span><br><span class="line">//插入文件</span><br><span class="line">include(&quot;IncDB.php&quot;);</span><br><span class="line">//获取数据</span><br><span class="line">$name=$_POST[&apos;name&apos;];</span><br><span class="line">$text=$_POST[&apos;text&apos;];</span><br><span class="line">//插入数据            表名            条件                                              当前时间</span><br><span class="line">$sql = &quot;INSERT INTO `intd` ( `user`, `content`, `lastdate`) VALUES ( &apos;$name&apos;, &apos;$text&apos;, now());&quot;;</span><br><span class="line">//执行语句          数据库   sq语句</span><br><span class="line">$result=mysqli_query($link,$sql);</span><br><span class="line">//条件为真</span><br><span class="line">if($result)</span><br><span class="line">&#123;</span><br><span class="line">//    提示框                       跳转主页面</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&apos;留言成功&apos;);window.location.href=&apos;index.php&apos;&lt;/script&gt;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">//    条件不成立 弹框提示</span><br><span class="line">    echo &quot;&lt;script&gt;alert(&apos;留言失败&apos;)&lt;/script&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>
<p>以上留言版没有过滤防护功能，实现截图如下：<br><img src="/2019/02/20/寒假学习记录/留言板.png" alt></p>
<hr>
<p>3.实现xss攻击<br>在评论区留言一句xss代码，<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">再尝试留言</span><br><span class="line">```&lt;script language=&quot;JavaScript&quot;&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">window.open(&quot;http://localhost:63342/untitled2/index.php&quot;); </span><br><span class="line">&#125;</span><br><span class="line">//--&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<p>结果如下：<img src="/2019/02/20/寒假学习记录/while.png" alt></p>
<hr>
<p>自动弹出多个窗口，xss攻击成功（浏览器瘫痪，新手有点慌张）。<br>打开phpmyadmin，删除这句留言，网页恢复正常<br><img src="/2019/02/20/寒假学习记录/数据库.png" alt></p>
<hr>
<p>#sqlmap 使用<br>1.kali linux下使用sqlmap，我先找了一下靶场,用了墨者学院的一个mysql注入靶场，<br><img src="/2019/02/20/寒假学习记录/mzxy.png" alt></p>
<hr>
<p>url：<br><a href="http://219.153.49.228:45709/show.php?id=MQo=" target="_blank" rel="noopener">http://219.153.49.228:45709/show.php?id=MQo=</a></p>
<hr>
<p>这个URL是base64编码。<br>尝试sqlmap:！<a href="寒假学习记录/1.png"></a></p>
<p>提升等级：sqlmap.py -u <a href="http://219.153.49.228:45709/show.php?id=MQo=" target="_blank" rel="noopener">http://219.153.49.228:45709/show.php?id=MQo=</a> –tamper base64encode.py –dbs –level 3<br>！<a href="寒假学习记录/2.png"></a><br>还是没出现数据库。新手不知道怎么办了。<br>火狐的hackerbar手工注入还不会。注： hexo框架上传图片有些小问题。</p>
<hr>
<p>#文件上传<br>正在看webshell，待补充。</p>
]]></content>
  </entry>
  <entry>
    <title>pagehello</title>
    <url>/2019/01/21/pagehello/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
