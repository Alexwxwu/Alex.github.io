{"meta":{"title":"Hilbert","subtitle":"keep moving","description":"Is loneliness the norm in life ?","author":"Wenxuan Wu","url":"https://wu-wenxuan.github.io"},"pages":[{"title":"about","date":"2020-01-20T16:29:33.000Z","updated":"2020-01-21T03:19:08.206Z","comments":true,"path":"about/index.html","permalink":"https://wu-wenxuan.github.io/about/index.html","excerpt":"","text":"about me Hello, I’m wwx, a junior from HIT . My major is Cyber space security , however, I ‘m a beginner and try to find my real interests ."},{"title":"categories","date":"2020-01-20T16:29:30.000Z","updated":"2020-01-20T16:31:39.006Z","comments":true,"path":"categories/index.html","permalink":"https://wu-wenxuan.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-20T16:29:27.000Z","updated":"2020-01-20T16:31:39.012Z","comments":true,"path":"tags/index.html","permalink":"https://wu-wenxuan.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"排列组合","date":"2020-03-18T01:27:22.321Z","updated":"2020-01-15T02:16:58.176Z","comments":true,"path":"2020/03/18/排列组合/","link":"","permalink":"https://wu-wenxuan.github.io/2020/03/18/排列组合/","excerpt":"","text":"title: Algdate: 2019-08-04 tags: 刷题关于全排列问题解法：1递归通常采用带回溯的dfs算法，遍历多叉树找到基线条件，进行交换或者插入方法*","categories":[],"tags":[]},{"title":"","slug":"Pytorch-第2篇","date":"2020-03-18T01:27:22.252Z","updated":"2020-01-23T15:41:40.707Z","comments":true,"path":"2020/03/18/Pytorch-第2篇/","link":"","permalink":"https://wu-wenxuan.github.io/2020/03/18/Pytorch-第2篇/","excerpt":"","text":"PytorchVariabledtype: torch.float32 torch.int64tensor numpy 共享内存依照数值： 生成全零张量torch.zeros_like()torch.zeros()torch.full()torch.full_like()创建等差的一维张量[start,end,steps)torch.arrange()创建均分的一维张量[start,end,steps)tensor.linspace()步长：end-start /(steps-1)tensor.logspace()tensor.eye() 依据概率比分布：生成正态分布torch.normal() mean std生成标准正态分布,均匀分布torch.randn()torch.rand_like()生成随机排列torch.randperm()伯努利（0，1）torch.bernoulli() tensor 的拼接与切分1.1 torch.cat() 将张量按照维度dim进行拼接tensor:dim:1.2 torch.stack() 在新创建的维度dim上进行拼接tensor:dim:1.3 torch.chunk()将张量按照维度dim进行平均切分input：chunks：要切分的份数dim:1.4 torch.split()tensor:split_size_or_sections:dim:2.1 torch.index_select()input:dim:index:2.2torch.masked_select() 按照mask中的true索引3.1 torch.shape() 变换张量形状3.2 torch.transpose()3.3 torch.t()3.4 torch.squeeze()3.5 torch.unsqueeze()","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-03-18T01:14:24.644Z","updated":"2019-01-21T06:13:14.379Z","comments":true,"path":"2020/03/18/hello-world/","link":"","permalink":"https://wu-wenxuan.github.io/2020/03/18/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Pytorch 第一篇","slug":"Pytorch-第一篇","date":"2020-01-19T14:24:09.000Z","updated":"2020-01-21T01:40:37.021Z","comments":true,"path":"2020/01/19/Pytorch-第一篇/","link":"","permalink":"https://wu-wenxuan.github.io/2020/01/19/Pytorch-第一篇/","excerpt":"","text":"Pytorch 第一篇 Anaconda是神器，但作为初学者的我，还是处处踩坑。对于Python也是刚捡起来，以前并没多了解。安装好Anaconda,CUDA,torch,torchversion，测试如下指令：conda create -n pytorch_gpu python=3.7报错：这应该是conda的问题，conda的python版本也没activate。尝试删掉pkgs文件夹重新执行指令，还是同样的报错。测试了一个下午，还是没找到解决办法。最后卸载anaconda，进入whl的安装文件夹，采用 pip install —（torch官网选择合适版本的whl）这里再cmd下执行了，但在pycharm的terminal中还需执行，否则不能install，会报错： No module named ‘tools.nnwrap’，是版本不匹配的问题。我这里下载了python3.5版本的torch，本机python3.5. 在cmd测试可以正常import torch。猜测是pycharm解释器的选择问题？还需要仔细了解Python的interpreter—–python.exe.torch 1print(&quot;hello pytorch&#123;&#125;&quot;.format(torch.__version__)) 这学期学过了Compiler principle，x86的Compilation,只是学校里简单的介绍。我对于高级语言转换成机器语言的完整过程还是很空白，没有一个完整的体系概念。我感觉自己现在杂乱无章，C++的动态链接库.dll，Jvm的运行机制，Python.exe解释器，很多实际遇到的问题都没法解决，或者停下来看，我觉得还是很可惜的。","categories":[],"tags":[]},{"title":"NLP_beginner","slug":"NLP-beginner","date":"2020-01-13T16:00:00.000Z","updated":"2020-01-15T02:15:26.927Z","comments":true,"path":"2020/01/14/NLP-beginner/","link":"","permalink":"https://wu-wenxuan.github.io/2020/01/14/NLP-beginner/","excerpt":"","text":"NLP入门 day_0 最近对NLP比较感兴趣，开始记录我的NLP学习之路","categories":[],"tags":[{"name":"NLP","slug":"NLP","permalink":"https://wu-wenxuan.github.io/tags/NLP/"}]},{"title":"MongoDB------第一篇","slug":"MongoDB第一篇","date":"2019-09-24T13:54:45.000Z","updated":"2020-01-15T02:15:45.152Z","comments":true,"path":"2019/09/24/MongoDB第一篇/","link":"","permalink":"https://wu-wenxuan.github.io/2019/09/24/MongoDB第一篇/","excerpt":"","text":"MongoDB——第一篇1.什么是momgodb：MongoDB 将数据存储为一个文档，数据结构由(key=&gt;value)对组成。MongoDB文档类似于Json对象(BSON):1.支持多种查询语言，还可以对数据库建立索引2.面向集合存储，容易存储对象类型的数据 面向集合:Collection-Oriented 数据被分组存在数据集中，被称为一个集合每个集合在数据库中都有一个唯一的标识名，并且可以包含无限数目的文档。集合的概念类似关系型数据库（RDBMS）里的表（table），不同的是它不需要定义任何模式（schema) 。 存储在集合中的文档，被存储为键-值对的形式。键用于唯一标识一个文档，为字符串类型，而值则可以是各种复杂的文件类型。我们称这种存储形式为BSON（Binary Serialized Document Format）。3","categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"https://wu-wenxuan.github.io/tags/MongoDB/"}]},{"title":"MongoDB------第二篇","slug":"MongoDB第二篇","date":"2019-09-23T16:00:00.000Z","updated":"2020-01-15T02:15:45.146Z","comments":true,"path":"2019/09/24/MongoDB第二篇/","link":"","permalink":"https://wu-wenxuan.github.io/2019/09/24/MongoDB第二篇/","excerpt":"","text":"Mongodb@Document:标示映射到Mongodb文档上的领域对象 @Id:标示某个领域为ID域 @Indexed:标示某个字段为Mongodb的索引字段 Spring Data","categories":[],"tags":[{"name":"MongoDB","slug":"MongoDB","permalink":"https://wu-wenxuan.github.io/tags/MongoDB/"}]},{"title":"JVM_day0","slug":"JVM_0","date":"2019-09-12T13:54:45.000Z","updated":"2020-01-15T02:16:13.978Z","comments":true,"path":"2019/09/12/JVM_0/","link":"","permalink":"https://wu-wenxuan.github.io/2019/09/12/JVM_0/","excerpt":"","text":"JAVA 内存区域和内存溢出异常2.1 程序计数器1.每条线程都需要一个程序计数器：java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式实现的，在任何一个确定的时刻，一个处理器只会执行一条线程中的指令，为了线程切换后可以恢复到正确的执行位置，每个线程拥有一个独立的counter，这类内存区域称为线程私有内存。 2.2 JVM stacks虚拟机栈1.JVM stack描述的是Java方法执行的内存模型，每个方法执行，同时创建一个栈帧，用于存储局部变量表等信息，每一个方法从调用到执行完成的过程，就对应了一个栈帧的push，pop操作。 2.一般把java内存分为Heap,Stack,Stack中的局部变量表存放了编译期各种基本数据类型（boolean,byte,char,short,int,float,long,double），其中，64位的double和long占用2个局部空间(slot)，其余各占1个，局部变量表所需的内存空间在编译期间完成分配。3.两种异常：stackover error：线程请求的栈深度大于虚拟机所允许的深度。outofMemory error：动态拓展时候无法申请到足够的内存 2.3 Native method stacks 本地方法栈1.本地方法栈和jvmstacks作用相似，jvm为java方法（字节码）服务，本地方法栈为虚拟机使用的Native方法服务，也有以上两种异常","categories":[],"tags":[]},{"title":"接口和抽象类","slug":"关于接口和抽象类","date":"2019-08-31T16:00:00.000Z","updated":"2020-01-15T02:15:26.922Z","comments":true,"path":"2019/09/01/关于接口和抽象类/","link":"","permalink":"https://wu-wenxuan.github.io/2019/09/01/关于接口和抽象类/","excerpt":"","text":"关于接口和抽象类接口(interface)和抽象类（abstract class）是和支持抽象类定义的两种机制。 接口：公开的，不能有私有方法或者变量，接口中的所有方法都没有方法体，通过关键字interface实现。 抽象类：可以有私有方法或者变量，通过把类或者类中的方法声明为abstract来表示一个类是一个抽象类，被声明的抽象类不能有方法体 抽象类和普通类的区别：抽象类不能被实例化","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://wu-wenxuan.github.io/tags/Java/"}]},{"title":"Mybatis_day0","slug":"Mybatis_0","date":"2019-08-03T16:00:00.000Z","updated":"2020-01-15T02:16:34.235Z","comments":true,"path":"2019/08/04/Mybatis_0/","link":"","permalink":"https://wu-wenxuan.github.io/2019/08/04/Mybatis_0/","excerpt":"","text":"MyBatis查询结果resultTtpe返回值类型：1.返回一般数据类型比如根据id获得数据库某个字段的值mapper接口：String getElemNameById(Integer id);SQL映射文件：&lt;select id=&quot;getElemNameById&quot; resultType=&quot;string&quot;&gt; select username from t_employee where id =#{id} &lt;/select&gt; 2.返回JavaBean类型的数据比如根据某个字段获得数据库中的信息，把查询结果信息封装成某个JavaBean类型的数据mapper接口：Employee getElemNameById(Integer id);SQL映射文件：&lt;select id=&quot;getElemNameById&quot; resultType=&quot;employee&quot;&gt; select*from t_employee where id =#{id} &lt;/select&gt;3.返回List类型 若查询的数据不止一条，比如模糊查询，全表查询等。这时候返回的数据可能是不止一条数据，多数据处理，放在List集合中mapper接口：List&lt;Employee&gt;getAllEmps();SQL映射文件：&lt;select id=&quot;getAllEmps&quot; resultType=&quot;employee&quot;&gt; select*from t_employee&lt;/select&gt; 4.返回Map类型将查询到的数据封装成Map1.查询的结果是一条，可以把查询的数据以{表字段名，对应的值}方式存入到Map中mapper接口：Map&lt;String,Object&gt;getEmAsMapById(Integer id);2.若查询到的结果是多条数据，也可以把查询的数据以{表中某一字段名，JavaBean}方式封装成Mapmapper接口：@MapKey(“id”)Map&lt;Integer,Employee&gt; getAllEmpAsMap();","categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://wu-wenxuan.github.io/tags/Mybatis/"}]},{"title":"Spring Boot_day0","slug":"spring boot_0","date":"2019-07-27T16:00:00.000Z","updated":"2020-01-15T02:14:30.243Z","comments":true,"path":"2019/07/28/spring boot_0/","link":"","permalink":"https://wu-wenxuan.github.io/2019/07/28/spring boot_0/","excerpt":"","text":"#学习Spring Boot ##第一篇 ##配置maven ##Spring Boot工程结构以下结构是比较推荐的package组织方式 com.example.myproject.domin:用于实体映射关系和数据访问相关的接口和实现 com.example.myproject.service:用于编写业务逻辑相关的接口和实现 com.example.myproject.web：用于编写Web层相关的接口和实现，比如SPringlMVC的controller等 ##注解 ###核心注解@RestController:是@ResponseBody和@Controller的缩写 @RequestMapping: @RequestMapping是一个用来处理请求地址映射的注解，可用于类或者方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。 @GetMapping: @RequestMapping注解有六个属性，下面进行详细的说明。1.value, methodvalue:指定请求的实际地址，指定的地址可以是URI Template模式。method:指定请求的method类型，GET、POST、PUT、DELETE等。 2.consumes, producesconsumes:指定处理请求的提交内容类型（Content-Type），例如application/json,text/html。produces:指定返回的内容类型，仅当request请求头中的（Accept）类型中包含该指定类型才返回。 3.params, headersparams:指定request中必须包含某些参数值才让该方法处理。headers:指定request中必须包含某些指定的header值，才能让该方法处理请求。 @RequestMapping @GetMapping @PostMapping 区别 @GetMapping是一个组合注解，是@RequestMapping(method = RequestMethod.GET)的缩写。 @PostMapping是一个组合注解，是@RequestMapping(method = RequestMethod.POST)的缩写。 @RequestParam通过这个注解从页面中传递参数 @ResponseBody返回值处理器，专门用于处理Handler方法的返回值，执行完Controller的一个具体方法，返回一个普通对象，若标注ResponseBody，则返回一个json字符串 @Controller和@RequestController**SpringApplicationConfigrauation(Application.classs)在1.4x后被替换为@SpringBoot() ###其他注解@Autowired：自动导入依赖的bean @PathVariable:获取参数 参考链接：https://www.jianshu.com/p/039f448defbd ##RESTful APIRest关键字：REST是REpresentational State Transfer的缩写（一般中文翻译为表述性状态转移),简单的说，REST就是把资源的状态以适合客户端或服务端的形式从服务端转移到客户端(或反过来)。在REST中，资源通过URL进行识别和定位，然后通过行为(Http方法)来定义REST完成怎样的功能。 在SpringBoot中： ##thymeleaf：thymeleaf是纯HTML，和jsp一样，但不需要服务器，是spring boot前端显示的一个模板 ##Swagger2：Api接口生成文档工具","categories":[],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://wu-wenxuan.github.io/tags/Spring-Boot/"}]},{"title":"Spring Boot_day1","slug":"spring boot_1","date":"2019-07-27T16:00:00.000Z","updated":"2020-01-15T02:15:26.913Z","comments":true,"path":"2019/07/28/spring boot_1/","link":"","permalink":"https://wu-wenxuan.github.io/2019/07/28/spring boot_1/","excerpt":"","text":"学习Spring Boot第二篇spring boot 集成redisstringRedisTemplate.opsForValue().get(“test”)//根据key获取缓存中的valspring boot 集成mongoDB整合MyBatis map&lt;String,Object&gt;POJO,BO,VO,DTO,DAO,POPO：持久对象，一个PO就是数据库中的一条记录BO：业务对象，把业务逻辑封装为一个对象，这个对象可以包括一个或多个其他对象VO:视图的对象，对于一个web页面，将整个页面属性封装为一个对象，然后用一个VO对象在视图层和控制层进行运输交换POJO：DAO:数据访问对象","categories":[],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://wu-wenxuan.github.io/tags/Spring-Boot/"}]},{"title":"跨域问题","slug":"跨域问题","date":"2019-07-27T16:00:00.000Z","updated":"2020-01-15T02:16:45.484Z","comments":true,"path":"2019/07/28/跨域问题/","link":"","permalink":"https://wu-wenxuan.github.io/2019/07/28/跨域问题/","excerpt":"","text":"跨域问题跨域资源共享（CORS）","categories":[],"tags":[{"name":"web","slug":"web","permalink":"https://wu-wenxuan.github.io/tags/web/"}]},{"title":"Get&Post","slug":"Get&Post","date":"2019-07-20T16:00:00.000Z","updated":"2020-01-15T02:13:00.552Z","comments":true,"path":"2019/07/21/Get&Post/","link":"","permalink":"https://wu-wenxuan.github.io/2019/07/21/Get&Post/","excerpt":"","text":"##关于Get和Post 参考链接：https://blog.csdn.net/yipiankongbai/article/**表现形式：Http请求格式 &lt;method&gt;&lt;request-URL&gt;&lt;version&gt;&lt;headers&gt; &lt;entity-body&gt; 在HTTP请求中，奇异行必须是一个请求行，包括请求方法，请求URL，报文所用HTTP版本信息。紧接着是一个herders小节，可以有零个或一个首部，用来说明服务器要使用的附加信息。在首部之后就是一个空行，最后就是报文实体的主体部分，包含一个由任意数据组成的数据块。但是并不是所有的报文都包含实体的主体部分。Get请求实例：Request URL: https://cdn.bootcss.com/font-awesome/4.7.0/fonts/fontawesome-webfont.woff2?v=4.7.0Post请求实例:Request URL: http://localhost:8080/admin/page/modify 1.GET请求，请求的数据会附加在URL之后，以?分割URL和传输数据，多个参数用&amp;连接。URL的编码格式采用的是ASCII编码，而不是uniclde，即是说所有的非ASCII字符都要编码之后再传输。 2.POST请求：POST请求会把请求的数据放置在HTTP请求包的包体中。因此，GET请求的数据会暴露在地址栏中，而POST请求则不会。","categories":[],"tags":[{"name":"web","slug":"web","permalink":"https://wu-wenxuan.github.io/tags/web/"}]},{"title":"无法更新博客","slug":"无法更新博客","date":"2019-02-24T01:33:05.000Z","updated":"2019-03-06T13:28:43.584Z","comments":true,"path":"2019/02/24/无法更新博客/","link":"","permalink":"https://wu-wenxuan.github.io/2019/02/24/无法更新博客/","excerpt":"","text":"#关于HEXO上传图片问题1.问题：写第一篇博客时候，上传图片失败，页面没有显示，更改_config,yml文件以后可以生成一个新建的md所对应的文件夹，将图片放入该文件夹，执行hexo d -g，重新加载页面可以显示。但是后续上传的一些图片又无法显示了，github上对图片提示：”Binary File not shown”，其他已经上传的图片显示： File renamed without changes。解决：待补充 解决：Hexo框架上传图片，再source文件-——post文件中生成的新文件夹，里面放该篇博客所用的图片，数量不能太多，另外，要使用 hexo -clean 清除浏览器缓存，再用hexo -g ，hexo -d命令部署再GitHub上。","categories":[],"tags":[]},{"title":"寒假学习记录","slug":"寒假学习记录","date":"2019-02-20T09:47:09.000Z","updated":"2020-01-15T02:12:38.162Z","comments":true,"path":"2019/02/20/寒假学习记录/","link":"","permalink":"https://wu-wenxuan.github.io/2019/02/20/寒假学习记录/","excerpt":"","text":"第一篇博客这是我的第一篇博客，主要练习一下markdown语法并记录一下寒假学习知识 phpstudy+mysql+xss实现留言板攻击 准备部分初次接触php,下载安装phpstudy，phpstorm，打开自带的mysql数据库。 留言板实现过程留言板设计思路主要分为三个部分，前端页面(index.php)，连接数据库(incDB.php)，前端留言存入数据库(insertToDB.php)。这是留言板最基本的三项内容，没有加入登陆界面，评论，好评差评功能。下面附上代码实现： index.php12345678910111213141516171819202122232425262728293031323334353637383940&lt;form method=&quot;POST&quot; action=&quot;InsetToDB.php&quot;&gt; 昵称:&lt;input type=&quot;text&quot; size=&quot;8&quot;; name=&quot;name&quot;&gt; &lt;p&gt; 内容:&lt;textarea rows=&quot;5&quot; name=&quot;text&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt; &lt;/p&gt; &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot; name=&quot;B1&quot;&gt;&lt;input type=&quot;reset&quot; value=&quot;重置&quot; name=&quot;B2&quot;&gt;&lt;/p&gt;&lt;/form&gt;&lt;?php/** * Created by PhpStorm. * User: wwx * Date: 2019/2/14 * Time: 23:16 *///utf-8 编码格式header(&quot;Content-Type: text/html;charset=utf-8&quot;);//插入文件（错误发生后脚本会继续执行）include(&quot;IncDB.php&quot;);//查询数据$query = &quot;SELECT * FROM intd&quot;;//执行查询语句 mysql链接 查询字符串$result = mysqli_query($link, $query);if($result)&#123;// 条件为真 while($row = mysqli_fetch_row($result)) &#123;// 遍历数据 echo &quot;ID: &quot;.$row[0].&quot; 姓名: &quot;.$row[1].&quot; 时间: &quot;.$row[3].&quot;&lt;br&gt;&quot;; echo $row[2]; echo &quot;&lt;hr&gt;&lt;br&gt;&quot;; &#125;&#125;?&gt;&lt;?php//关闭数据库mysqli_close($link);?&gt; incDB.php12345678910111213141516/** * Created by PhpStorm. * User: wwx * Date: 2019/2/14 * Time: 23:20 */// utf-8 编码格式header(&quot;Content-Type: text/html;charset=utf-8&quot;);// 链接数据库 主机 用户名 密码 表名 默认端口$link=mysqli_connect( &apos;localhost&apos;, &apos;root&apos;, &apos;root&apos;, &apos;intd&apos;, &apos;3306&apos; );//如果链接不到if(!$link)&#123; die(&quot;&lt;center&gt;出错啦:1!&lt;/center&gt;&quot;);&#125;?&gt; insertToDB.php12345678910111213141516171819202122232425262728/** * Created by PhpStorm. * User: wwx * Date: 2019/2/14 * Time: 23:21 *///编码格式header(&quot;Content-Type: text/html;charset=utf-8&quot;);//插入文件include(&quot;IncDB.php&quot;);//获取数据$name=$_POST[&apos;name&apos;];$text=$_POST[&apos;text&apos;];//插入数据 表名 条件 当前时间$sql = &quot;INSERT INTO `intd` ( `user`, `content`, `lastdate`) VALUES ( &apos;$name&apos;, &apos;$text&apos;, now());&quot;;//执行语句 数据库 sq语句$result=mysqli_query($link,$sql);//条件为真if($result)&#123;// 提示框 跳转主页面 echo &quot;&lt;script&gt;alert(&apos;留言成功&apos;);window.location.href=&apos;index.php&apos;&lt;/script&gt;&quot;;&#125;else// 条件不成立 弹框提示 echo &quot;&lt;script&gt;alert(&apos;留言失败&apos;)&lt;/script&gt;&quot;;?&gt; 以上留言版没有过滤防护功能，实现截图如下： 3.实现xss攻击在评论区留言一句xss代码，123456789再尝试留言```&lt;script language=&quot;JavaScript&quot;&gt;&lt;!--while (true)&#123;window.open(&quot;http://localhost:63342/untitled2/index.php&quot;); &#125;//--&gt;&lt;/script&gt; 结果如下： 自动弹出多个窗口，xss攻击成功（浏览器瘫痪，新手有点慌张）。打开phpmyadmin，删除这句留言，网页恢复正常 #sqlmap 使用1.kali linux下使用sqlmap，我先找了一下靶场,用了墨者学院的一个mysql注入靶场， url：http://219.153.49.228:45709/show.php?id=MQo= 这个URL是base64编码。尝试sqlmap:！ 提升等级：sqlmap.py -u http://219.153.49.228:45709/show.php?id=MQo= –tamper base64encode.py –dbs –level 3！还是没出现数据库。新手不知道怎么办了。火狐的hackerbar手工注入还不会。注： hexo框架上传图片有些小问题。 #文件上传正在看webshell，待补充。","categories":[],"tags":[]},{"title":"pagehello","slug":"pagehello","date":"2019-01-21T06:34:04.000Z","updated":"2019-01-21T06:34:04.816Z","comments":true,"path":"2019/01/21/pagehello/","link":"","permalink":"https://wu-wenxuan.github.io/2019/01/21/pagehello/","excerpt":"","text":"","categories":[],"tags":[]}]}